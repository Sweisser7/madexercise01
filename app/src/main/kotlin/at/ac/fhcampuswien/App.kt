/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package at.ac.fhcampuswien

import java.lang.IllegalArgumentException
import java.util.Scanner

class App {
    // Game logic for a number guessing game
    fun playNumberGame(digitsToGuess: Int = 4) {
        //TODO: build a menu which calls the functions and works with the return values
        val generatedNumber = generateRandomNonRepeatingNumber(digitsToGuess)
        println("Guess your number with $digitsToGuess digits:")
        while (true) {
            val scan = Scanner(System.`in`)
            val input = scan.nextLine().trim().toInt()
            val solution = checkUserInputAgainstGeneratedNumber(input, generatedNumber)
            println(solution)
            if (solution.n == 4 && solution.m == 4) {
                println("You guessed the correct number, congrats!")
                break
            }
        }
    }

    /**
     * Generates a non-repeating number of a specified length between 1-9.
     *
     * Note: The function is designed to generate a number where each digit is unique and does not repeat.
     * It is important to ensure that the length parameter does not exceed the maximum possible length
     * for non-repeating digits (which is 9 excluding 0 for base-10 numbers).
     *
     * @param length The length of the non-repeating number to be generated.
     *               This dictates how many digits the generated number will have.
     * @return An integer of generated non-repeating number.
     *         The generated number will have a number of digits equal to the specified length and will
     *         contain unique, non-repeating digits.
     * @throws IllegalArgumentException if the length is more than 9 or less than 1.
     */
    val generateRandomNonRepeatingNumber: (Int) -> Int = { length ->
        //TODO implement the function
        if (length < 1 || length > 9) {
            throw IllegalArgumentException("Wrong size of number")
        }

        val digits = mutableListOf<Int>()
        var randomNumber = 0

        for (i in 1 .. length) {
            var digit: Int
            do {
                digit = (1..9).random()
            } while (digit in digits)
            digits.add(digit)
            randomNumber = randomNumber * 10 + digit
        }
        randomNumber
    }

    /**
     * Compares the user's input integer against a generated number for a guessing game.
     * This function evaluates how many digits the user guessed correctly and how many of those
     * are in the correct position. The game generates number with non-repeating digits.
     *
     * Note: The input and the generated number must both be numbers.
     * If the inputs do not meet these criteria, an IllegalArgumentException is thrown.
     *
     * @param input The user's input integer. It should be a number with non-repeating digits.
     * @param generatedNumber The generated number with non-repeating digits to compare against.
     * @return [CompareResult] with two properties:
     *         1. `n`: The number of digits guessed correctly (regardless of their position).
     *         2. `m`: The number of digits guessed correctly and in the correct position.
     *         The result is formatted as "Output: m:n", where "m" and "n" represent the above values, respectively.
     * @throws IllegalArgumentException if the inputs do not have the same number of digits.
     */
    val checkUserInputAgainstGeneratedNumber: (Int, Int) -> CompareResult = { input, generatedNumber ->
        //TODO implement the function
        val inputString = input.toString()
        val genNumber = generatedNumber.toString()

        if (inputString.length != genNumber.length) {
            throw IllegalArgumentException("Generated Number and Input have to be same size")
        }
        var n = 0

        val digitOccurrences = mutableMapOf<Char, Int>()
        for (char in inputString) {
            digitOccurrences[char] = digitOccurrences.getOrDefault(char, 0) +1
        }

        for (char in genNumber) {
            if (digitOccurrences.containsKey(char) && digitOccurrences[char]!! > 0) {
                n++
                digitOccurrences[char] = digitOccurrences[char]!! -1
            }
        }
        val minLength = minOf(inputString.length, genNumber.length)
        var m = 0

        for (i in 0 until minLength) {
            if (inputString[i] == genNumber[i]) {
                m++
            }
        }
        CompareResult(n, m)
    }
}

fun main() {
    // TODO: call the App.playNumberGame function with and without default arguments
    val game = App()
    game.playNumberGame()
}
